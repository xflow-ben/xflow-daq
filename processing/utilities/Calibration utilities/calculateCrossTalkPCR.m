function C_pcr = calculateCrossTalkPCR(R, A)
%%%%% GENERATED BY CHATPGT AND NOT VALIDATED%%%%%%%%
    % calculateCrossTalkPCR_noToolbox - Calculate the cross-talk matrix using PCR
    % without the Statistics and Machine Learning Toolbox.
    % R: Response matrix (N x M), where N is the number of measurements, and M is the number of load channels
    % A: Applied load matrix (N x M), where N is the number of measurements, and M is the number of load channels
    % C_pcr: Cross-talk matrix (M x M)
    
    % Step 1: Perform Singular Value Decomposition (SVD) on the applied load matrix (A)
    [U, S, V] = svd(A, 'econ');
    
    % Step 2: Compute the variance explained by each principal component
    singularValues = diag(S);
    explained = (singularValues .^ 2) / sum(singularValues .^ 2) * 100;
    
    % Step 3: Choose number of principal components to keep
    % Retain components explaining 99% of variance (you can adjust this threshold)
    explainedVariance = cumsum(explained);
    numComponents = find(explainedVariance >= 99, 1);  % Find how many components explain 99% of variance
    
    % Step 4: Reduce dimensionality of A using the selected components
    A_reduced = U(:, 1:numComponents) * S(1:numComponents, 1:numComponents);  % Project A into the reduced principal component space

    % Step 5: Perform multiple linear regression with reduced A
    B = A_reduced \ R;  % Least squares solution for regression coefficients

    % Step 6: Map the coefficients back to the original load space
    C_pcr = V(:, 1:numComponents) * B;  % Map back from PCA space to original space

    % Display results
    disp('Cross-talk matrix (C_pcr):');
    disp(C_pcr);
end
